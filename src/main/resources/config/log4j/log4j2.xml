<?xml version="1.0" encoding="UTF-8"?>
<!-- log4j2使用说明：
使用方式如下：
private static final Logger logger = LogManager.getLogger(实际类名.class.getName());
-->

<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<Configuration status="WARN" monitorInterval="1800">
    <Properties>
        <Property name="log-path">D:\44\logs</Property>
    </Properties>


    <Appenders>
        <!--这个输出控制台的配置-->
        <Console name="console-log" target="SYSTEM_OUT">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <!--<ThresholdFilter level="trace" onMatch="ACCEPT" onMismatch="DENY" />-->
            <!-- 输出日志的格式-->
            <PatternLayout pattern="[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n"/>
        </Console>
        <!--
            日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，
            如果设置为WARN，则低于WARN的信息都不会输出。对于Loggers中level的定义同样适用.
            %d{HH:mm:ss.SSS} 表示输出到毫秒的时间

            %t 输出当前线程名称

            %-5level 输出日志级别，-5表示左对齐并且固定输出5个字符，如果不足在右边补0

            %logger 输出logger名称，因为Root Logger没有名称，所以没有输出

            %msg 日志文本

            %n 换行

            其他常用的占位符有：

            %F 输出所在的类文件名，如Client.java

            %L 输出行号

            %M 输出所在方法名

            %l  输出语句所在的行数, 包括类名、方法名、文件名、行数

            最后是Logger的配置，这里只配置了一个Root Logger。

          将日志保存到文件当中


           RollingRandomAccessFile的属性：

           fileName  指定当前日志文件的位置和文件名称

           filePattern  指定当发生Rolling时，文件的转移和重命名规则

           SizeBasedTriggeringPolicy  指定当文件体积大于size指定的值时，触发Rolling

           DefaultRolloverStrategy  指定最多保存的文件个数

           TimeBasedTriggeringPolicy  这个配置需要和filePattern结合使用，
           注意filePattern中配置的文件重命名规则是${FILE_NAME}-%d{yyyy-MM-dd HH-mm}-%i，最小的时间粒度是mm，即分钟，
           TimeBasedTriggeringPolicy指定的size是1，结合起来就是每1分钟生成一个新文件。
           如果改成%d{yyyy-MM-dd HH}，最小粒度为小时，则每一个小时生成一个文件。
        -->
        <!--这个会打印出所有的信息，每次大小超过size，则这size大小的日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="trace-log" fileName="${log-path}/system-trace.log"
                     filePattern="${log-path}/system-trace-%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <pattern>[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n</pattern>
            </PatternLayout>
            <Policies>
                <!-- SizeBasedTriggeringPolicy单个文件的大小限制 -->
                <!-- <SizeBasedTriggeringPolicy size="20 MB"/>-->
                <!--每天更新一次-->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
            <!-- 最多备份20个 -->
            <!-- <DefaultRolloverStrategy max="20" />-->
        </RollingFile>

        <RollingFile name="error-log" fileName="${log-path}/system-error.log"
                     filePattern="${log-path}/system-error-%d{yyyy-MM-dd}.log">
            <PatternLayout>
                <pattern>[%-5level] %d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %c{1} - %msg%n</pattern>
            </PatternLayout>
            <Policies>

                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
            </Policies>
        </RollingFile>


        <!--写入数据库配置，在Logger中设置日志级别为error-->
        <JDBC name="databaseAppender" tableName="trace_log">
            <!--需要自己手动关闭-->
           <!-- <ConnectionFactory class="org.mybatis.example.config.DBConnectionFactory"
                               method="getDatabaseConnection"  />-->

            <!--使用该方式，需要在webapp文件夹下创建META-INF文件夹，并创建context.xml文件-->
            <DataSource jndiName="java:comp/env/jdbc/test" />

            <Column name="class" pattern="%c" />
            <Column name="method" pattern="%M" />
            <Column name="log_level" pattern="%p" />
            <Column name="msg" pattern="%msg"/>
            <Column name="create_time" pattern="%d{yyyy-MM-dd HH:mm:ss.SSS}"/>
        </JDBC>

    </Appenders>
    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <Loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG信息-->
        <!-- <logger name="org.springframework" level="INFO"></logger>
         <logger name="org.mybatis" level="INFO"></logger>-->
        <!--
            additivity="false"表示在该logger中输出的日志不会再延伸到父层logger。
            这里如果改为true，则会延伸到Root Logger，遵循Root Logger的配置也输出一次。
            name：用来指定该Logger所适用的类或者类所在的包全路径，继承自Root节点。一般是项目包名或者框架的包名，
            比如：com.jourwon，org.springframework
        -->
        <Logger name="org.mybatis.example" level="trace" additivity="false">
            <appender-ref ref="trace-log" level="debug"/>
            <appender-ref ref="error-log" level="error"/>
            <appender-ref ref="console-log" level="debug"/>
            <!--插入数据库使用的级别信息为info-->
            <AppenderRef ref="databaseAppender" level="info" />

        </Logger>
        <!--AppenderRef：Logger的子节点，用来指定该日志输出到哪个Appender，如果没有指定，就会默认继承自Root。
        如果指定了，那么会在指定的这个Appender和Root的Appender中都会输出，
        此时我们可以设置Logger的additivity="false"只在自定义的Appender中进行输出-->
        <Root level="info" additivity="false">
            <AppenderRef ref="console-log"/>
        </Root>
    </Loggers>
</Configuration>